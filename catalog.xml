<exercises>
    <exercise>

        <name>
            Plateau ( normal Mode )
        </name>

        <description>
Eingabe: Beliebig viele Integer Zahlen.
Ausgabe: Die Laenge ( 1. Element im Array ) und die Startposition ( 2. Element im Array ) des laengsten Plateaus.
Ein Plateau ist eine Sequenz gleicher Zahlen, die durch zwei niedrigere Zahlen direkt links bzw. rechts davon begrenzt wird. Der Rückgabewert soll NULL sein, wenn weniger als drei Zahlen uebergeben werden. Der Rückgabewert fuer die Laenge soll 0 und die Position -1 sein, wenn es kein laengstes Plateau gibt.
Gehen Sie davon aus, dass es hoechstens ein laengstes Plateau gibt.
        </description>

        <classes>

            <class name="Plateau">
class Plateau {
    public static int[] laengstesPlateu(int[] Eingabe){
        //ToDo: implementieren sie den Code hier
    }
}
            </class>

            <tests>

                <test name="PlateauTest">
import static org.junit.Assert.*;
import org.junit.Test;

class PlateauTest {
    @Test
    public void testSomething() {
        //ToDo: Schreiben sie selbstständig Tests für die Aufgabe.
    }
}
                </test>

            </tests>

        </classes>

        <options>
        </options>

    </exercise>
    <exercise>

        <name>
            Pruefziffern ( ATDD )
        </name>

        <description>
In dieser Aufgabe werden Sie eine Methode und die dazugehoerigen Tests mit Hilfe einer echten Spezifikation aus dem normalen Entwickleralltag schreiben. Die Spezifikation beschreibt die Plausibilit¨atsprufung von Kontonummern. Informieren Sie sich selbstständig über die Spezifikation und versuchen Sie diese mithilfe von Akzeptanztests umzusetzen.
        </description>

        <classes>

            <class name="Pruefziffern">
class Pruefziffern {

    public static boolean pruefe17(int[] ziffern) {
        // Implementieren Sie Ihre Loesung hier 
    }
}
            </class>

            <tests>

                <test name="PruefziffernTest">
import static org.junit.Assert.*;
import org.junit.Test;

class PruefziffernTest {

    @Test
    public void testSomething {
        //implementieren Sie Tests für kleinere Zwischenschritte hier
    }
}
                </test>

            </tests>

        </classes>

        <options>
            <option name="ATDD" value="true" />
        </options>

    </exercise>
    <exercise>

        <name>
            Roman Numbers ( Babysteps )
        </name>

        <description>
Your Code should convert arabic numbers into roman numbers.
Be careful: you only have 3 minutes for each phase except refactoring, so try to take small steps to avoid getting your code reset.
        </description>

        <classes>

            <class name="RomanNumberConverter">
class RomanNumberConverter {
    public static String convertToRoman(int input){
        //Implement your solution here
    }
}
            </class>

            <tests>

                <test name="RomanNumberConverterTest">
import static org.junit.Assert.*;
import org.junit.Test;

class RomanNumbersTest {

    @Test
    public void testSomething() {
        //implement tests for small steps here
    }
}
                </test>

            </tests>

        </classes>

        <options>

            <option name="babysteps" value="1" />

        </options>

    </exercise>
</exercises>
